const t=["","*",".*","root","root.*"];function e(t=[],e={},a=[]){if(0===t.length)return a;for(let s=0,o=t.length;s<o;s++){const o=t[s],r=n(o,e);r&&a.push({path:o,value:r})}return a}function n(e,n){return function(e){return t.indexOf(e)>-1}(e)?n:function(t,e){if(!e)return t;const n=e.split(".");let a=t;for(let t=0;t<n.length;t++){const e=n[t];if("*"!==e&&(a=a[e]),t<n.length-1&&"object"!=typeof a){a=void 0;break}}return a}(n,e)}export default t=>a=>{const s=function(t,a){let s=[];const o=t.action((t,e)=>e);return{"state.keys.request":({payload:e})=>{const s=n(e.path,t.getState());a.stateKeysResponse(e.path,Object.keys(s))},"state.values.request":({payload:e})=>{const s=n(e.path,t.getState());a.stateValuesResponse(e.path,s)},"state.values.subscribe":({payload:n})=>{if(s=n.paths,n.paths){const n=e(s,t.getState());a.stateValuesChange(n)}t.subscribe((t,n)=>{const o=n&&n.name||"Reactotron/DISPATCH",r=e(s,t);(function(t,e){try{return e?Promise.resolve(e()).then(function(e){const n=e?Object.keys(e):[];let a={};for(let e=0;e<n.length;e++){const s=n[e];a[s]=t[s]}return a}):Promise.resolve(!1)}catch(t){return Promise.reject(t)}})(t,n).then(t=>{t?a.stateActionComplete(o,t):a.display({name:"UNISTORE",preview:"store.setState",value:"Warning: The values of the action cannot be determined when store.setState is used to update state within an action. Think about returning an object instead.",important:!0}),a.stateValuesChange(r)})})},"state.action.dispatch":({payload:e})=>{t.setState(e.action)},"state.backup.request":()=>{const e=t.getState();a.stateBackupResponse(e)},"state.restore.request":({payload:t})=>{o(t.state)}}}(t,a);return{onCommand:t=>{const e=s[t.type];e&&e(t)}}};
//# sourceMappingURL=index.modern.mjs.map
