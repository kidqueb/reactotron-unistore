{"version":3,"file":"index.mjs","sources":["../src/helpers.js","../src/index.js","../src/createCommandHandlers.js"],"sourcesContent":["import dlv from \"dlv\";\n\n/**\n * For each path we're subscribed to, get the values after the latest state change.\n * @param {array} paths\n * @param {object} state\n * @param {array} changes\n */\nexport function getChanges(paths = [], state = {}, changes = []) {\n  if (paths.length === 0) return changes;\n\n  for (let index = 0, total = paths.length; index < total; index++) {\n    const path = paths[index];\n    const actualPath = path.endsWith(\".*\") ? path.replace(\".*\", \"\") : path;\n    const isRoot = [\"\", \"*\", \".*\", \"root\", \"root.*\"].indexOf(path) > -1;\n    const value = isRoot ? state : dlv(state, actualPath);\n\n    if (value) changes.push({ path, value });\n  }\n\n  return changes;\n}\n\n/**\n * @param {function} action\n */\nexport async function getActionValues(state, action) {\n  if (!action) return false;\n  const actionKeys = Object.keys(await action());\n\n  let actionValues = {};\n  for (let index = 0; index < actionKeys.length; index++) {\n    const key = actionKeys[index];\n    actionValues[key] = state[key];\n  }\n\n  return actionValues;\n}\n","import createCommandHandlers from './createCommandHandlers'\n\nexport default store => {\n  return reactotron => {\n    const handlers = createCommandHandlers(store, reactotron)\n\n    return {\n      onCommand: res => {\n        const handler = handlers[res.type]\n        handler && handler(res)\n      }\n    };\n  };\n};\n","import { getChanges, getActionValues } from \"./helpers\";\n\nexport default function createCommandHandlers(store, reactotron) {\n  let storeSub,\n    clientSubs = [];\n  const restoreState = store.action((_, state) => state);\n\n  return {\n    // \"state.keys.request\": res => {\n    //   console.log(res);\n    //   const state = store.getState();\n    // },\n\n    \"state.values.subscribe\": ({ payload }) => {\n      clientSubs = payload.paths;\n\n      // handle initial paths from the client\n      if (payload.paths) {\n        const changes = getChanges(clientSubs, store.getState());\n        reactotron.stateValuesChange(changes);\n      }\n\n      // subscribe to handle changes to our subscribed paths\n      if (!storeSub)\n        store.subscribe((state, action) => {\n          const name = (action && action.name) || \"Reactotron/DISPATCH\";\n          const changes = getChanges(clientSubs, state);\n\n          getActionValues(state, action).then(actionValues => {\n            if (actionValues) {\n              reactotron.stateActionComplete(name, actionValues);\n            } else {\n              reactotron.display({\n                name: 'UNISTORE',\n                preview: 'store.setState',\n                value: 'Warning: The values of the action cannot be determined when store.setState is used to update state within an action. Think about returning an object instead.',\n                important: true\n              });\n            }\n\n            reactotron.stateValuesChange(changes);\n          });\n        });\n    },\n\n    \"state.action.dispatch\": ({ payload }) => {\n      store.setState(payload.action);\n    },\n\n    \"state.backup.request\": () => {\n      const state = store.getState();\n      reactotron.stateBackupResponse(state);\n    },\n\n    \"state.restore.request\": ({ payload }) => {\n      restoreState(payload.state);\n    }\n  };\n}\n"],"names":["getChanges","paths","state","changes","length","index","total","path","actualPath","endsWith","replace","value","indexOf","dlv","push","store","reactotron","handlers","storeSub","clientSubs","restoreState","action","_","state.values.subscribe","payload","getState","stateValuesChange","subscribe","name","actionKeys","Object","keys","actionValues","key","getActionValues","then","stateActionComplete","display","preview","important","state.action.dispatch","setState","state.backup.request","stateBackupResponse","state.restore.request","createCommandHandlers","onCommand","res","handler","type"],"mappings":"4BAQgBA,EAAWC,EAAQ,GAAIC,EAAQ,GAAIC,EAAU,IAC3D,GAAqB,IAAjBF,EAAMG,OAAc,OAAOD,EAE/B,IAAK,IAAIE,EAAQ,EAAGC,EAAQL,EAAMG,OAAQC,EAAQC,EAAOD,IAAS,CAChE,MAAME,EAAON,EAAMI,GACbG,EAAaD,EAAKE,SAAS,MAAQF,EAAKG,QAAQ,KAAM,IAAMH,EAE5DI,EADS,CAAC,GAAI,IAAK,KAAM,OAAQ,UAAUC,QAAQL,IAAS,EAC3CL,EAAQW,EAAIX,EAAOM,GAEtCG,GAAOR,EAAQW,KAAK,CAAEP,KAAAA,EAAMI,MAAAA,IAGlC,OAAOR,iBClBMY,GACNC,IACL,MAAMC,WCFoCF,EAAOC,GAC/CE,IACFC,EAAa,GACf,MAAMC,EAAeL,EAAMM,OAAO,CAACC,EAAGpB,IAAUA,GAEhD,MAAO,CAMLqB,yBAA0B,EAAGC,QAAAA,MAI3B,GAHAL,EAAaK,EAAQvB,MAGjBuB,EAAQvB,MAAO,CACjB,MAAME,EAAUH,EAAWmB,EAAYJ,EAAMU,YAC7CT,EAAWU,kBAAkBvB,GAK7BY,EAAMY,UAAU,CAACzB,EAAOmB,KACtB,MAAMO,EAAQP,GAAUA,EAAOO,MAAS,sBAClCzB,EAAUH,EAAWmB,EAAYjB,aFAXA,EAAOmB,OAC3C,OAAKA,kBACgCA,sBAArC,MAAMQ,EAAaC,OAAOC,QAE1B,IAAIC,EAAe,GACnB,IAAK,IAAI3B,EAAQ,EAAGA,EAAQwB,EAAWzB,OAAQC,IAAS,CACtD,MAAM4B,EAAMJ,EAAWxB,GACvB2B,EAAaC,GAAO/B,EAAM+B,GAG5B,OAAOD,qBATa,GADtB,oCEEUE,CAAgBhC,EAAOmB,GAAQc,KAAKH,IAC9BA,EACFhB,EAAWoB,oBAAoBR,EAAMI,GAErChB,EAAWqB,QAAQ,CACjBT,KAAM,WACNU,QAAS,iBACT3B,MAAO,gKACP4B,WAAW,IAIfvB,EAAWU,kBAAkBvB,QAKrCqC,wBAAyB,EAAGhB,QAAAA,MAC1BT,EAAM0B,SAASjB,EAAQH,SAGzBqB,uBAAwB,KACtB,MAAMxC,EAAQa,EAAMU,WACpBT,EAAW2B,oBAAoBzC,IAGjC0C,wBAAyB,EAAGpB,QAAAA,MAC1BJ,EAAaI,EAAQtB,SDnDN2C,CAAsB9B,EAAOC,GAE9C,MAAO,CACL8B,UAAWC,IACT,MAAMC,EAAU/B,EAAS8B,EAAIE,MAC7BD,GAAWA,EAAQD"}